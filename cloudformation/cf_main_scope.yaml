AWSTemplateFormatVersion: 2010-09-09
Resources:

  InboundStream:
    Type: AWS::Kinesis::Stream
    Properties: 
      Name: InboundStream
      RetentionPeriodHours: 24
      ShardCount: 1

  OutboundStream:
    Type: AWS::Kinesis::Stream
    Properties: 
      Name: OutboundStream
      RetentionPeriodHours: 24
      ShardCount: 1

  InboundStreamLambdaFunctionEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties: 
      BatchSize: 100 
      Enabled: true
      EventSourceArn: !GetAtt InboundStream.Arn
      FunctionName: !GetAtt ProcessLambdaFunction.Arn
      MaximumBatchingWindowInSeconds: 0
      StartingPosition: LATEST 
    
  ProcessLambdaFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
          - Effect: Allow
            Principal:
              Service:
                - kinesis.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonKinesisFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  ProcessLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          #!/usr/bin/env python3

          import base64
          import json
          import boto3
          import uuid

          def write_to_reciever(data):
              client = boto3.client('kinesis')
              
              response = client.put_record(
                  StreamName='OutboundStream',
                  Data=data,
                  PartitionKey=str(uuid.uuid4())
              )
              print(response)
              return response
              
          def lambda_handler(event, context):
            for record in event['Records']:
              #Kinesis data is base64 encoded so decode here
              print(record)
              payload=base64.b64decode(record["kinesis"]["data"])
              print("Recieved data from kinesis")
              write_to_reciever(payload)
              print("Object successfully sent to kinesis.")
                
      Handler: index.lambda_handler
      Role: !GetAtt ProcessLambdaFunctionExecutionRole.Arn
      Runtime: python3.8

  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      ApiKeySourceType: HEADER
      Description: An API Gateway with a Lambda Integration
      EndpointConfiguration:
        Types:
          - EDGE
      Name: lambda-api

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: 'lambda'
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APILambdaFunction.Arn}/invocations'
      OperationName: 'lambda'
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: 'application/json'
      RestApiId: !Ref ApiGatewayRestApi
      Schema: {}

  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      Description: Lambda API Stage v0
      RestApiId: !Ref ApiGatewayRestApi
      StageName: 'v0'

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGatewayMethod
    Properties:
      Description: Lambda API Deployment
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource: !GetAtt APILambdaFunction.Arn

  APILambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          #!/usr/bin/env python3
          import base64
          import json
          import boto3
          import uuid
          def write_to_sender(data):
              client = boto3.client('kinesis')
              
              response = client.put_record(
                  StreamName='InboundStream',
                  Data=data,
                  PartitionKey=str(uuid.uuid4())
              )
              print(response)
              return response
              
          def lambda_handler(event, context):
              print(event)
              data = json.loads(event.get('body'))
              print(data)
              if data.get('user_timespent') in [0, '0', None]:
                  print("user_timespent missing or invalid")
                  return
              payload=base64.b64encode(json.dumps(data).encode('utf-8'))
              print("Recieved data from kinesis")
              write_to_sender(payload)
              print("Object successfully sent to kinesis.")
              return {
                  'statusCode': 200,
                  'body': json.dumps('Hello from Lambda!')}  
      Handler: index.lambda_handler
      Role: !GetAtt ProcessLambdaFunctionExecutionRole.Arn
      Runtime: python3.8

Outputs:
    InboundStreamName:
        Value: !Ref InboundStream